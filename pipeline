properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Env Name from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Env', 
            randomName: 'choice-parameter-5631314439613978', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return[\'Could not get Environment\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return["DEV","QA","PRD"]'
                ]
            ]
        ], 
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Server from the Dropdown List', 
            filterLength: 1, 
            filterable: true, 
            name: 'Server', 
            randomName: 'choice-parameter-5631314456178619', 
            referencedParameters: 'Env', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        ''' if (Env.equals("DEV")){
                                return["DEV1","DEV2","DEV3"]
                            }
                            else if(Env.equals("QA")){
                                return["QA1","QA2","QA3"]
                            }
                            else if(Env.equals("PRD")){
                                return["PRD1","PRD2","PRD3"]
                            }
                        '''
                ]
            ]
        ]
    ])
])

import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.DumperOptions
import static org.yaml.snakeyaml.DumperOptions.FlowStyle.BLOCK

pipeline {
  environment {
         vari = ""
  }
  agent any
  stages {
      stage ("Basic Form") {
        steps {
          script
          {
            echo 'Hello'
            echo "${params.Env}"
            echo "${params.Server}"
            if (params.Server.equals("Could not get Environment from Env Param")) {
                echo "Must be the first build after Pipeline deployment.  Aborting the build"
                currentBuild.result = 'ABORTED'
                return
            }
            echo "Crossed param validation"
          }
        }
      }
      stage("Read Manifest Config") {
         steps {
          script {
            def regions = readYaml file: "config.yaml"
            echo "regions: " + regions
            
            env.awsregions = regions['providers']['aws']['region']
            env.azregions = regions['providers']['azure']['region']
            echo {awsregions}
            echo {azregions}
	        }
        }
      }
  }
}
