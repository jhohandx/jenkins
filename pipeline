properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Env Name from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Env', 
            randomName: 'choice-parameter-5631314439613978', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return[\'Could not get Environment\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return["DEV","QA","PRD"]'
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Server from the Dropdown List', 
            filterLength: 1, 
            filterable: true, 
            name: 'Server', 
            randomName: 'choice-parameter-5631314456178619', 
            referencedParameters: 'Env', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        ''' if (Env.equals("DEV")){
                                return["DEV1","DEV2","DEV3"]
                            }
                            else if(Env.equals("QA")){
                                return["QA1","QA2","QA3"]
                            }
                            else if(Env.equals("PRD")){
                                return["PRD1","PRD2","PRD3"]
                            }
                        '''
                ]
            ]
        ]
    ])
])

import org.yaml.snakeyaml.Yaml

pipeline {
    options {
    buildDiscarder(logRotator(numToKeepStr: '1', artifactNumToKeepStr: '1'))
  }
  environment {
         vari = ""
  }
  agent any
  stages {
      stage ("Basic Form") {
        steps {
          script
          {
            echo 'Hello'
            echo "${params.Env}"
            echo "${params.Server}"
            if (params.Server.equals("Could not get Environment from Env Param")) {
                echo "Must be the first build after Pipeline deployment.  Aborting the build"
                currentBuild.result = 'ABORTED'
                return
            }
            echo "Crossed param validation"
          }
        }
      }
      stage("List Files") {
         steps {
          script {
            sh 'ls'
            sh 'pwd'
          }
         }
      }
      stage("Read Manifest Config") {
         steps {
          script {
            // def regions = readFile file: "config.yaml"
            // echo "regions: " + regions
            
            // env.awsregions = regions['providers']['aws']['region']
            // env.azregions = regions['providers']['azure']['region']
            // echo {awsregions}
            // echo {azregions}
            List provider = []
            List region = []
            List az = []
            Yaml parser = new Yaml()
            def example = parser.load(("/var/jenkins_home/workspace/github_main/config.yaml" as File).text)

            for(inf in example.providers.keySet()){
                provider.add(inf)  
            }

            for(inf in example.providers.aws.region.keySet()){
                region.add(inf)  
            }


            println(provider)
            println(region)
	        }
        }
      }
    stage('Input Cloud Specific Parameters') {
        def cloudParams = input(
            message: 'Please fill out the fields and continue.',
            parameters: [
                string(name: 'provider', description: 'Required: provider', defaultValue: '', trim: true),
                string(name: 'region', description: 'Required: region', defaultValue: '', trim: true),
                [$class: 'ChoiceParameter',
                    choiceType: 'PT_RADIO',
                    description: 'Required: Primary Region',
                    filterLength: 1,
                    filterable: false,
                    name: 'primaryRegion',
                    script: [
                        $class: 'GroovyScript',
                        fallbackScript: [
                            classpath: [],
                            sandbox: true,
                            script: 'return["Could not get Primary Region"]'
                        ],
                        script: [
                            classpath: [],
                            sandbox: true,
                            script: """
                                return ["${provider.join('","')}"]
                            """
                        ]
                    ]
                ],
                [$class: 'ChoiceParameter',
                    choiceType: 'PT_RADIO',
                    description: 'Optional: Secondary Region',
                    filterLength: 1,
                    filterable: false,
                    name: 'secondaryRegion',
                    script: [
                        $class: 'GroovyScript',
                        fallbackScript: [
                            classpath: [],
                            sandbox: true,
                            script: 'return["Could not get Secondary Region"]'
                        ],
                        script: [
                            classpath: [],
                            sandbox: true,
                            script: """
                                return ["none:selected","${region.join('","')}"]
                            """
                        ]
                    ]
                ]
            ]
        )      
   } 
}



        stage('Input Cloud Specific Parameters') {
            def cloudParams = input(
                message: 'Please fill out the fields and continue.',
                parameters: [
                    string(name: 'provider', description: 'Required: provider', defaultValue: '', trim: true),
                    string(name: 'region', description: 'Required: region', defaultValue: '', trim: true),
                    [$class: 'ChoiceParameter',
                        choiceType: 'PT_RADIO',
                        description: 'Required: Primary Region',
                        filterLength: 1,
                        filterable: false,
                        name: 'primaryRegion',
                        script: [
                            $class: 'GroovyScript',
                            fallbackScript: [
                                classpath: [],
                                sandbox: true,
                                script: 'return["Could not get Primary Region"]'
                            ],
                            script: [
                                classpath: [],
                                sandbox: true,
                                script: """
                                    return ["${provider.join('","')}"]
                                """
                            ]
                        ]
                    ],
                    [$class: 'ChoiceParameter',
                        choiceType: 'PT_RADIO',
                        description: 'Optional: Secondary Region',
                        filterLength: 1,
                        filterable: false,
                        name: 'secondaryRegion',
                        script: [
                            $class: 'GroovyScript',
                            fallbackScript: [
                                classpath: [],
                                sandbox: true,
                                script: 'return["Could not get Secondary Region"]'
                            ],
                            script: [
                                classpath: [],
                                sandbox: true,
                                script: """
                                    return ["none:selected","${region.join('","')}"]
                                """
                            ]
                        ]
                    ]
                    ]
                    // [$class: 'DynamicReferenceParameter',
                    //     choiceType: 'ET_FORMATTED_HTML',
                    //     description: 'Required: Zones of the subnets.',
                    //     name: 'subnetZones',
                    //     referencedParameters: 'subnetNum',
                    //     omitValueField: true,
                    //     script: [
                    //         $class: 'GroovyScript',
                    //         fallbackScript: [
                    //             classpath: [],
                    //             sandbox: true,
                    //             script: "return 'Could not get number of subnets'"
                    //         ],
                    //         script: [
                    //             classpath: [],
                    //             sandbox: true,
                    //             script: """
                    //                 subnets = Integer.parseInt(subnetNum)
                    //                 if (subnets > 0) {
                    //                     html = ""
                    //                     for (int i = 0; i < subnets; i++) {
                    //                         html += "Subnet \${i+1}: <input class='setting-input' type='text' name='value' size='100'  style='width:100%' maxlength='64' value=''/>"
                    //                     }
                    //                 } else {
                    //                     html = ""
                    //                 }
                    //                 return html
                    //                 """
                    //         ]
                    //     ]
                    // ]
                ]
            )
            cloudParams.each {
                ky, vl -> println("'${ky}': '${vl}'")
            }
        }