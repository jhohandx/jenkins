// def getfunction(url){
//    // GET
//    def get = new URL("${url}").openConnection();
//    def getRC = get.getResponseCode();
//        if(getRC.equals(200)) {
//            return(get.getInputStream().getText());
//        }
// }

// def postfunction(url,json){
//     // POST
//     def post = new URL("${url}").openConnection();
//     def message = "${json}"
//     post.setRequestMethod("POST")
//     post.setDoOutput(true)
//     post.setRequestProperty("Content-Type", "application/json")
//     post.getOutputStream().write(message.getBytes("UTF-8"));
//     def postRC = post.getResponseCode();
//     if(postRC.equals(200)) {
//         return(post.getInputStream().getText());
//     }
// }

def providers() {
    return ["aws","azure"]
}

def prov=providers()

properties([
    buildDiscarder(logRotator(daysToKeepStr: '3', numToKeepStr: '3')),
])
properties(
    [
        parameters(
            [
                choice(name: 'provider', choices: providers(), description: 'The cloud provider to set up the network in.'),
                [$class: 'CascadeChoiceParameter',
                    choiceType: 'PT_RADIO',
                    description: 'Required: The environment to create the network for. (Only used for resource tags)',
                    filterLength: 1,
                    filterable: false,
                    name: 'region',
                    randomName: 'choice-parameter-399188539163000',
                    referencedParameters: 'provider',
                    script: [
                        $class: 'GroovyScript',
                        fallbackScript: [
                            classpath: [],
                            sandbox: true,
                            script: 'return["Could not get Environment Names"]'
                        ],
                        script: [
                            classpath: [],
                            sandbox: true,
                            script: '''if (provider == "aws"){
                                        return["awsregion1", "awsregion2"]
                                    }else{
                                        return["azureregion1","azureregion2"]
                                    }'''
                        ]
                    ]
                ],
                [$class: 'CascadeChoiceParameter',
                    choiceType: 'PT_RADIO',
                    description: 'Required: The environment to create the network for. (Only used for resource tags)',
                    filterLength: 1,
                    filterable: false,
                    name: 'az',
                    randomName: 'choice-parameter-399188539163001',
                    referencedParameters: 'provider',
                    script: [
                        $class: 'GroovyScript',
                        fallbackScript: [
                            classpath: [],
                            sandbox: true,
                            script: 'return["Could not get Environment Names"]'
                        ],
                        script: [
                            classpath: [],
                            sandbox: true,
                            script: '''if (provider == "aws"){
                                        return["a", "b", "c"]
                                    }else{
                                        return["a","b"]
                                    }'''
                        ]
                    ]
                ]
            ]
        )
    ]  
)    
node {
    stage('print vars') {
           prov = providers()
           echo "providers ${provider}"
           echo "region ${region}"
           echo "az ${az}"

        //    def get = getfunction("https://httpbin.org/get")
        //    echo "get ${get}"

        //    def post = postfunction("https://httpbin.org/post",'{"message":"this is a message"}')
        //    echo "post ${post}"

    }
    stage('using vars') {
    
    }
}
